server.port: 8091
spring.mvc.view.prefix: /WEB-INF/jsp/
spring.mvc.view.suffix: .jsp 
# 메모리모드로 다시 제시작하면 모두 지워짐 모쓰겠다.
#spring.h2.console:
#  enabled: true
#  path: /h2-console
#  settings:
#    trace: false
#    web-allow-others: false
#http://localhost:8080/h2-console 접근
#https://velog.io/@maigumi/Spring-Boot%EC%99%80-H2-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0
#아래처럼 하니까. 재시작해도 지워지지 않는다.
#http://localhost:8080/h2-console 접근 가능

spring:
  h2:
    console:
      enabled: true
  profiles:
    active: default
  datasource:
##H2디비 설정
      #jdbc-url: jdbc:h2:c:/data/testdb;AUTO_SERVER=TRUE  #AUTO_SERVER=true를 해야만 멀티로 접속할수 있다. 이모드는 파일경루일 경우
      #jdbc-url: jdbc:log4jdbc:h2:c:/data/testdb;AUTO_SERVER=TRUE  #AUTO_SERVER=true를 해야만 멀티로 접속할수 있다. 이모드는 파일경루일 경우
      #jdbc-url: jdbc:h2:tcp://localhost:8090/./data/testdb 
      #jdbc-url: jdbc:log4jdbc:h2::mem:userdb;DB_CLOSE_DELAY=-1
      #driver-class-name: org.h2.Driver      
      #driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
      #junit 테스트 넣음
#postgresql   하나 설정      
    hikari:
      maximum-pool-size: 4
      driver-class-name: org.postgresql.Driver       
      #jdbc-url: jdbc:postgresql://127.0.0.1:5432/stockweb  #postgres   db명
      #jdbc-url: jdbc:postgresql://postgres:5432/stockweb  #postgres   db명
      #driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy      
      jdbc-url: jdbc:postgresql://127.0.0.1:5432/stockweb  #postgres   db명      
      username: postgres
      password: pwd
    #url: jdbc:postgresql://localhost:5432/stockweb  #postgres   db명
    #driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy  로그가 너무 나와서 제거
  output:
    ansi:
      enabled: always
  security:
    user:
      name: test # Default user name.
      password: test # Password for the default user name.
      roles: # Granted roles for the default user name.      
spring.datasource.sql-script-encoding: utf-8
spring.jpa.database-platform: com.example.demo.db.sqlutil.CustomPostgreSQLDialect
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults: false
spring.jpa.properties.hibernate.default_schema: public  #postgresql 디폴트 스키마 지정  일단 이거 제외 db를 빠꾸자. 
spring.datasource.type: org.apache.tomcat.jdbc.pool.DataSource
#spring.jpa.database-platform: org.hibernate.dialect.H2Dialect      



# MyBatis
# mapper.xml 위치 지정
mybatis.mapper-locations: mybatis-mapper/**/*.xml
# model 프로퍼티 camel case 설정
mybatis.configuration.map-underscore-to-camel-case: true
# 패키지 명을 생략할 수 있도록 alias 설정

# mapper 로그레벨 설정


       
spring.jpa:
   hibernate.ddl-auto: update
#create : JPA가 DB와 상호작용할 때 기존에 있던 스키마(테이블)을 삭제하고 새로 만드는 것을 뜻합니다.
#create-drop : JPA 종료 시점에 기존에 있었던 테이블을 삭제합니다.
#update : JPA에 의해 변경된 부분만 반영합니다.
#validate : 엔티티와 테이블이 정상 매핑되어 있는지만 검증합니다.
#none : 초기화 동작을 사용하지 않습니다.
   generate-ddl: true   #데이터베이스 자동 초기화 기능을 사용하려면 true로 세팅해야합니다.
   show-sql: true   #쿼리문 보여주기
    
#  https://lannstark.tistory.com/14  sql 로그보기  
logging:
  level:
    org:
#     hibernate: 
#      type:
#       descriptor: 
#        sql: trace  이거 데이터가 다 나와서 엄청 느려짐.
     springframework.web : debug
     springframework.security.web.csrf.CsrfFilter: DEBUG
     sql: error
     jdbc: off
     jdbc.sqlonly: debug
  file : c:/logs/demoJpa/product.log
  file.max-history: 9999999
  file.max-size : 100MB        
  config: classpath:logback-spring.xml
 
  #https://ellune.tistory.com/11        
  #spring boot 2 logback 설정  
   
spring.jpa.properties.hibernate:
  show-sql: true 
  format_sql: true  # 압축된 쿼리를 읽기 좋게 포멧   
  use_sql_comments: true
   
    
#logging.level.org.springframework.security.web.csrf.CsrfFilter=DEBUG

#spring.boot:
#    admin:
#      client:
#        url: http://localhost:8081
# war 로 기동시 service-url 추가 해야줘됨.
#        instance:
#          service-url: http://localhost:8091
#management:
#  endpoints:
#    web:
#      exposure:
#        include: "*"

#스프링액츄에이터 ==> 모니터링 프로그램
#spring.boot.admin:
#        client:
#          url: http://localhost:8081 
          # username: jijs #admin monitoring server 의 id    
          #password: admin #admin monitoring server 의 password 
#          instance: 
#            name: demoJpa #(어플리케이션 명) 
#            metadata: # 나의 어플리케이션 (스프링 시큐리티 )로그인 정보 
#              username: jijs           #내가 기본 security 기능을 끄고 ajax로 해서 인지를 못하는 듯하다.
#              userpassword: amdin      #로그인 부분은 순수하게 spring security 로 변경하자
              
#actuator 라고 되어있지만 잘모르겠음  https://mycup.tistory.com/311
#spring.security: 
#    user: 
#      name: admin 
#      password: 1

#spring.boot.admin.client.auto-registration: true
# 어드민에서 모니터링 가능 하도록 엔드포인트도 모두 열어 줄것 
#management:
#  endpoints: 
#    web: 
#      exposure: 
#        include: '*' 
#  endpoint: 
#    health: 
#      show-details: always
#    shutdown.enabled: true

env:
  serverfilepath: d:\avdbs.com
  delaysleep: 1500