plugins {
	id 'org.springframework.boot' version '2.4.0'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	/*implementation 'org.springframework.boot:spring-boot-starter-security'*/  /*패스워드 암호화 때문에 사용--이걸쓰면 spring boot login , csrf필터 다 걸려서 사용합면 안됨   */
	/* compile group: 'org.springframework.security', name: 'spring-security-crypto', version: '3.1.0.RELEASE'  */  /*패스워드 암호화 때문에 사용   */
	
	implementation('org.apache.httpcomponents:httpclient')   /*외부api 호출을 위해서 */
	
	
	implementation 'org.codehaus.jackson:jackson-core' 
	implementation 'org.codehaus.jackson:jackson-mapper-asl'  /*jackson-mapper-asl 이건 view 리턴을 data리턴으로 잡아주는 것!!*/
	implementation 'org.codehaus.jackson:jackson-databind' /*jackson-databind 이건 json으로 들어오는 모든 데이터를 생긴 것만 똑같으면 모든 타입으로 변경해서*/
	
	
	//implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1' /*log 출력을 위해서   출처: https://goddaehee.tistory.com/207 [갓대희의 작은공간]  */
    compileOnly 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'




	
	   	
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	
	implementation("com.querydsl:querydsl-core")
    implementation("com.querydsl:querydsl-jpa")
    annotationProcessor("com.querydsl:querydsl-apt") // querydsl JPAAnnotationProcessor 사용 지정
    
    annotationProcessor("jakarta.persistence:jakarta.persistence-api") // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응 
    annotationProcessor("jakarta.annotation:jakarta.annotation-api") // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
}
/* 유투브보고 querydsl 설정했다.
https://www.youtube.com/watch?v=hIw4EuhF9o8

cmd 창에서  gradlw build 를 하면
src/main/generated  여기에  Q로시작하는 것들이  생성됨
*/
querydsl {
	jpa = true
	querydslSourcesDir="$buildDir/generated-source"
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

configurations { // 손권남님이 공유해주신 팁 
    // 아래를 지정하지 않으면, compile 로 걸린 JPA 의존성에 접근하지 못한다.
    querydsl.extendsFrom compileClasspath
}

test {
	useJUnitPlatform()
}

