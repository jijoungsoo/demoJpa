plugins {
	id 'org.springframework.boot' version '2.4.0'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	/*implementation 'org.springframework.boot:spring-boot-starter-security'*/  /*패스워드 암호화 때문에 사용--이걸쓰면 spring boot login , csrf필터 다 걸려서 사용합면 안됨   */
	/* compile group: 'org.springframework.security', name: 'spring-security-crypto', version: '3.1.0.RELEASE'  */  /*패스워드 암호화 때문에 사용   */
	
	implementation 'javax.servlet:jstl'
   	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'   /*jsp */
	
	implementation('org.apache.httpcomponents:httpclient')   /*외부api 호출을 위해서 */
	
	
	implementation 'org.reflections:reflections:0.9.12'  /*메소드 파라미터 name을 얻어오기 위해 달아보았다.*/
	
	implementation 'com.fasterxml.jackson.core:jackson-core:2.11.3' 
	implementation 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'  /*jackson-mapper-asl 이건 view 리턴을 data리턴으로 잡아주는 것!!*/
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.3' /*jackson-databind 이건 json으로 들어오는 모든 데이터를 생긴 것만 똑같으면 모든 타입으로 변경해서*/
	
	
	//implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1' /*log 출력을 위해서   출처: https://goddaehee.tistory.com/207 [갓대희의 작은공간]  */
    compileOnly 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
    //implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'  //이것도 docker에서 위에 compileOnly를 못읽어서 넣어주었다.

	compileOnly 'org.projectlombok:lombok:1.18.16'    ///docker에서  gradlew build에서 안되서 아래 것을 하나 더 추가했다.
	implementation 'org.projectlombok:lombok:1.18.16'
	annotationProcessor 'org.projectlombok:lombok:1.18.16'
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'   //이렇게 하니까. docker에서 gradle build 시 못읽는다. bootRun도 읽는다.
	//implementation 'com.h2database:h2'   //이렇게 하니까 읽었다.  둘다 살려보자.
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	
	implementation("com.querydsl:querydsl-core")
    implementation("com.querydsl:querydsl-jpa")
    annotationProcessor("com.querydsl:querydsl-apt") // querydsl JPAAnnotationProcessor 사용 지정
    
    annotationProcessor("jakarta.persistence:jakarta.persistence-api") // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응 
    annotationProcessor("jakarta.annotation:jakarta.annotation-api") // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
    
    
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.0") 
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.0")
    


}
/* 유투브보고 querydsl 설정했다.
https://www.youtube.com/watch?v=hIw4EuhF9o8

cmd 창에서  gradlw build 를 하면
src/main/generated  여기에  Q로시작하는 것들이  생성됨
*/
querydsl {
	jpa = true
	querydslSourcesDir="$buildDir/generated-source"
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

configurations { // 손권남님이 공유해주신 팁 
    // 아래를 지정하지 않으면, compile 로 걸린 JPA 의존성에 접근하지 못한다.
    querydsl.extendsFrom compileClasspath
}

test {
	useJUnitPlatform()
}
/* 안됨
compileJava {
  options.compilerArgs.addAll(['-parameters', 8])
}
*/

/* 
https://stackoverflow.com/questions/2237803/can-i-obtain-method-parameter-name-using-java-reflection
java8 이상으로 reflection으로 메소드에 인자이름을 얻어오려면
-parameters   옵션을 줘야하는데    maven 예는 많은데.. gradle은 없냐..
 <configuration>
                <!-- Original answer -->
                <compilerArgument>-parameters</compilerArgument>
                <!-- Or, if you use the plugin version >= 3.6.2 -->
                <parameters>true</parameters>
                <testCompilerArgument>-parameters</testCompilerArgument>
                <source>${java.version}</source>
                <target>${java.version}</target>
            </configuration>
*/
/*
https://www.grepiu.com/post/76  와 이거 써볼까.

https://github.com/ronmamo/reflections
이거에 대한 설명인데 별도 내용 없어도 parameter name 가져오는것 처럼 묘사 되어있다.
*/



/*출처: https://coding-start.tistory.com/304 [코딩스타트]
Junit 테스트쪽에 컴파일 안하기 위해 gradle build  시 
*/
sourceSets{
    main{
        java{
            srcDirs = ['src','extraSrc']
            exclude 'test/*'
        }
    }
}


compileJava {
     options.compilerArgs << '-parameters'
     options.fork = true
     options.forkOptions.executable = 'javac'  
}
     
tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs += ["-parameters"]  
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.compilerArgs += ["-parameters"]  
}
