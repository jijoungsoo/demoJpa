plugins {
	id 'org.springframework.boot' version '2.5.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.example'
version = '0.0.2-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	/* compile group: 'org.springframework.security', name: 'spring-security-crypto', version: '3.1.0.RELEASE'  */  /*패스워드 암호화 때문에 사용   */
	
	implementation 'javax.servlet:jstl'
   	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'   /*jsp */
	
	implementation('org.apache.httpcomponents:httpclient:4.5.13')   /*외부api 호출을 위해서 */
	
	
	implementation 'org.reflections:reflections:0.9.12'  /*메소드 파라미터 name을 얻어오기 위해 달아보았다.*/
	
	implementation 'com.fasterxml.jackson.core:jackson-core:2.12.4' 
	implementation 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'  /*jackson-mapper-asl 이건 view 리턴을 data리턴으로 잡아주는 것!!*/
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.4' /*jackson-databind 이건 json으로 들어오는 모든 데이터를 생긴 것만 똑같으면 모든 타입으로 변경해서*/
		
	//implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1' /*log 출력을 위해서   출처: https://goddaehee.tistory.com/207 [갓대희의 작은공간]  */
    compileOnly 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
    //implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'  //이것도 docker에서 위에 compileOnly를 못읽어서 넣어주었다.

	compileOnly 'org.projectlombok:lombok:1.18.20'    ///docker에서  gradlew build에서 안되서 아래 것을 하나 더 추가했다.
	implementation 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	//runtimeOnly 'com.h2database:h2'   //이렇게 하니까. docker에서 gradle build 시 못읽는다. bootRun도 읽는다.
	//compile group: 'org.postgresql', name: 'postgresql', version: '42.2.23'
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.18'

	//C:\Users\jijsx\.gradle\caches\modules-2\files-2.1\org.postgresql\postgresql\42.2.23
	
	//implementation 'com.h2database:h2'   //이렇게 하니까 읽었다.  둘다 살려보자.
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	
	implementation("com.querydsl:querydsl-core:4.4.0")
    implementation("com.querydsl:querydsl-jpa:4.4.0")
    annotationProcessor("com.querydsl:querydsl-apt:4.4.0") // querydsl JPAAnnotationProcessor 사용 지정
	// https://mvnrepository.com/artifact/com.querydsl/querydsl-sql-spring
	implementation("com.querydsl:querydsl-sql-spring:4.4.0");  //https://adunhansa.tistory.com/225

    
    
    //복잡한 쿼리문은 mybatis를 쓰자.
    implementation("org.springframework.data:spring-data-jdbc:2.2.2")
    implementation("org.mybatis:mybatis:3.5.7")
    implementation("org.mybatis:mybatis-spring:2.0.6")
    //mybatis 를 쓰려고 하는데 postgresql을 jpa랑 같이 사용하려고 할때 HikariCp에서 문제를 일으킨다고한다.
    //https://stackoverflow.com/questions/49088847/after-spring-boot-2-0-migration-jdbcurl-is-required-with-driverclassname
    //tomcat-jdbc를 쓰라고 한다.
    implementation("org.apache.tomcat:tomcat-jdbc:10.0.8")
	// https://mvnrepository.com/artifact/com.zaxxer/HikariCP
	//implementation group: 'com.zaxxer', name: 'HikariCP', version: '4.0.3'

        
    //com.zaxxer.hikari.HikariDataSource
    
    annotationProcessor("jakarta.persistence:jakarta.persistence-api") // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응 
    annotationProcessor("jakarta.annotation:jakarta.annotation-api") // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
    
    
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.2") 
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.2")
    
    /*스프링 상태 모니터링
	/actuator  로 접근
	 */
	implementation "org.springframework.boot:spring-boot-starter-actuator:2.5.2"
	implementation 'de.codecentric:spring-boot-admin-starter-client:2.4.3'
    
    //https://github.com/springfox/springfox
    implementation "io.springfox:springfox-boot-starter:3.0.0"


	//html태그를 제거하기위해서 쓰려고함 
	//https://java2020.com/q/hwprbhse
	// https://mvnrepository.com/artifact/org.jsoup/jsoup
	implementation "org.jsoup:jsoup:1.14.1"

    
	//java9이상 컴파일시 기존에 java8 이전에 포함되었던 이것이 없어서 문제가 된다고 한다.
	compile "javax.xml.bind:jaxb-api"


	// https://mvnrepository.com/artifact/commons-io/commons-io
	implementation group: 'commons-io', name: 'commons-io', version: '2.10.0'

	// https://mvnrepository.com/artifact/org.apache.commons/commons-compress
	implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.21'

	// https://mvnrepository.com/artifact/javax.jdo/jdo-api
	////javax.jdo.annotations.PrimaryKey can not find symbol  이거 오류 잡으려고 넣음
	implementation group: 'javax.jdo', name: 'jdo-api', version: '3.1'



	// https://mvnrepository.com/artifact/org.json/json
	//java.lang.NoClassDefFoundError: org/springframework/boot/configurationprocessor/json/JSONException,
	///https://seongbindb.tistory.com/134
	///  org.springframework.boot.configurationprocessor.json ==>org.json
	implementation group: 'org.json', name: 'json', version: '20210307'



	//웹사이트긁는데 사용
	//implementation 'org.seleniumhq.selenium:selenium-java'


	implementation 'com.auth0:java-jwt:3.18.1'

	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.7'


}
/* 유투브보고 querydsl 설정했다.
https://www.youtube.com/watch?v=hIw4EuhF9o8

cmd 창에서  gradlw build 를 하면
src/main/generated  여기에  Q로시작하는 것들이  생성됨

그때 이거 생성하고 어떤걸 설정했는지 기억이 나지 않는다.
eclipse 에서 import 가 안되네.

*/

/*출처: https://coding-start.tistory.com/304 [코딩스타트]
Junit 테스트쪽에 컴파일 안하기 위해 gradle build  시 
*/
sourceSets{
    main{
        java{
            /*srcDirs = ['src','extraSrc']*/
            exclude 'test/*'
        }
    }
}

querydsl {
	jpa = true
	//querydslSourcesDir="$buildDir/generated-source"
	querydslSourcesDir="src/main/generated-source"
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

configurations { // 손권남님이 공유해주신 팁 
    // 아래를 지정하지 않으면, compile 로 걸린 JPA 의존성에 접근하지 못한다.
    querydsl.extendsFrom compileClasspath
}

test {
	useJUnitPlatform()
}